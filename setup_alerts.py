#!/usr/bin/env python3
"""
Alert System Configuration Setup
Interactive script to configure email and SMS alerts for SolTrader
"""
import os
from pathlib import Path
import getpass
import re

def validate_email(email):
    """Basic email validation"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_phone(phone):
    """Basic phone number validation"""
    # Remove any formatting
    clean_phone = re.sub(r'[^\d+]', '', phone)
    # Check if it looks like a valid phone number
    return len(clean_phone) >= 10 and (clean_phone.startswith('+') or clean_phone.startswith('1') or len(clean_phone) == 10)

def create_env_file(config):
    """Create or update .env file with alert configuration"""
    env_path = Path(".env")
    
    # Read existing .env file if it exists
    existing_config = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_config[key] = value
    
    # Update with new alert config
    existing_config.update(config)
    
    # Write back to .env file
    with open(env_path, 'w') as f:
        f.write("# SolTrader Configuration\n")
        f.write("# Generated by setup_alerts.py\n\n")
        
        # Write Solana Tracker key first if exists
        if 'SOLANA_TRACKER_KEY' in existing_config:
            f.write(f"SOLANA_TRACKER_KEY={existing_config['SOLANA_TRACKER_KEY']}\n\n")
        
        # Write alert configuration
        f.write("# Alert System Configuration\n")
        for key, value in config.items():
            f.write(f"{key}={value}\n")
        
        # Write any other existing config
        f.write("\n# Other Configuration\n")
        for key, value in existing_config.items():
            if not key.startswith('ALERT_') and key != 'SOLANA_TRACKER_KEY':
                f.write(f"{key}={value}\n")
    
    print(f"Configuration saved to {env_path.absolute()}")

def setup_email_alerts():
    """Configure email alerts"""
    print("\n" + "="*60)
    print("EMAIL ALERT SETUP")
    print("="*60)
    
    config = {}
    
    # Enable email alerts
    enable = input("Enable email alerts? (y/n): ").lower().strip()
    config['ALERT_EMAIL_ENABLED'] = 'true' if enable == 'y' else 'false'
    
    if enable != 'y':
        return config
    
    # Email settings
    print("\nEmail Configuration:")
    print("(For Gmail, use your email and an 'App Password' - not your regular password)")
    print("Generate an App Password at: https://myaccount.google.com/apppasswords")
    
    # From email
    while True:
        from_email = input("\nFrom email address: ").strip()
        if validate_email(from_email):
            config['ALERT_FROM_EMAIL'] = from_email
            config['ALERT_SMTP_USERNAME'] = from_email  # Usually the same
            break
        else:
            print("Invalid email format. Please try again.")
    
    # SMTP settings
    smtp_host = input(f"SMTP host (default: smtp.gmail.com): ").strip()
    config['ALERT_SMTP_HOST'] = smtp_host or 'smtp.gmail.com'
    
    smtp_port = input(f"SMTP port (default: 587): ").strip()
    config['ALERT_SMTP_PORT'] = smtp_port or '587'
    
    # Password
    print(f"\nFor Gmail, use an App Password (not your regular password)")
    print("Generate one at: https://myaccount.google.com/apppasswords")
    password = getpass.getpass("Email password (App Password for Gmail): ")
    config['ALERT_SMTP_PASSWORD'] = password
    
    # To emails
    print(f"\nWho should receive alerts?")
    to_emails = []
    while True:
        email = input(f"Alert recipient email (or press Enter to finish): ").strip()
        if not email:
            break
        if validate_email(email):
            to_emails.append(email)
            print(f"Added: {email}")
        else:
            print("Invalid email format. Please try again.")
    
    if to_emails:
        config['ALERT_TO_EMAILS'] = ','.join(to_emails)
    else:
        print("No recipients added. Email alerts will be disabled.")
        config['ALERT_EMAIL_ENABLED'] = 'false'
    
    return config

def setup_sms_alerts():
    """Configure SMS alerts"""
    print("\n" + "="*60)  
    print("SMS ALERT SETUP")
    print("="*60)
    
    config = {}
    
    # Enable SMS alerts
    enable = input("Enable SMS alerts? (y/n): ").lower().strip()
    config['ALERT_SMS_ENABLED'] = 'true' if enable == 'y' else 'false'
    
    if enable != 'y':
        return config
    
    # SMS Provider choice
    print("\nSMS Provider Options:")
    print("1. Twilio (Reliable, requires account setup)")
    print("2. TextBelt (Simple, pay-per-message)")
    
    provider_choice = input("Choose provider (1 or 2): ").strip()
    
    if provider_choice == '1':
        config['ALERT_SMS_PROVIDER'] = 'twilio'
        return setup_twilio_config(config)
    elif provider_choice == '2':
        config['ALERT_SMS_PROVIDER'] = 'textbelt'
        return setup_textbelt_config(config)
    else:
        print("Invalid choice. SMS alerts disabled.")
        config['ALERT_SMS_ENABLED'] = 'false'
        return config

def setup_twilio_config(config):
    """Setup Twilio SMS configuration"""
    print("\nTwilio Setup:")
    print("1. Sign up at https://www.twilio.com/try-twilio")
    print("2. Get your Account SID and Auth Token from the Console")
    print("3. Get a Twilio phone number")
    
    config['ALERT_TWILIO_SID'] = input("Twilio Account SID: ").strip()
    config['ALERT_TWILIO_TOKEN'] = getpass.getpass("Twilio Auth Token: ")
    config['ALERT_TWILIO_FROM'] = input("Twilio phone number (e.g., +1234567890): ").strip()
    
    # To phone numbers
    to_phones = []
    print("\nWho should receive SMS alerts?")
    while True:
        phone = input("Phone number (+1234567890 format, or Enter to finish): ").strip()
        if not phone:
            break
        if validate_phone(phone):
            if not phone.startswith('+'):
                if phone.startswith('1') and len(phone) == 11:
                    phone = '+' + phone
                elif len(phone) == 10:
                    phone = '+1' + phone
            to_phones.append(phone)
            print(f"Added: {phone}")
        else:
            print("Invalid phone format. Use +1234567890 format.")
    
    if to_phones:
        config['ALERT_TO_PHONES'] = ','.join(to_phones)
    else:
        print("No phone numbers added. SMS alerts will be disabled.")
        config['ALERT_SMS_ENABLED'] = 'false'
    
    return config

def setup_textbelt_config(config):
    """Setup TextBelt SMS configuration"""
    print("\nTextBelt Setup:")
    print("1. Visit https://textbelt.com/ to get an API key")
    print("2. Simple pay-per-message pricing")
    
    api_key = getpass.getpass("TextBelt API key: ")
    config['ALERT_TEXTBELT_KEY'] = api_key
    
    # To phone numbers
    to_phones = []
    print("\nWho should receive SMS alerts?")
    while True:
        phone = input("Phone number (1234567890 format, or Enter to finish): ").strip()
        if not phone:
            break
        if validate_phone(phone):
            # TextBelt uses simple format
            clean_phone = re.sub(r'[^\d]', '', phone)
            if len(clean_phone) == 10:
                clean_phone = '1' + clean_phone
            to_phones.append(clean_phone)
            print(f"Added: {clean_phone}")
        else:
            print("Invalid phone format. Use 1234567890 format.")
    
    if to_phones:
        config['ALERT_TO_PHONES'] = ','.join(to_phones)
    else:
        print("No phone numbers added. SMS alerts will be disabled.")
        config['ALERT_SMS_ENABLED'] = 'false'
    
    return config

def setup_alert_preferences():
    """Setup alert timing and preferences"""
    print("\n" + "="*60)
    print("ALERT PREFERENCES")
    print("="*60)
    
    config = {}
    
    # Rate limiting
    max_per_hour = input("Maximum alerts per hour (default: 10): ").strip()
    config['ALERT_MAX_PER_HOUR'] = max_per_hour or '10'
    
    min_interval = input("Minimum minutes between same alerts (default: 5): ").strip()
    config['ALERT_MIN_INTERVAL'] = str((int(min_interval) if min_interval else 5) * 60)
    
    # Quiet hours
    quiet_hours = input("Enable quiet hours? (y/n): ").lower().strip()
    config['ALERT_RESPECT_QUIET'] = 'true' if quiet_hours == 'y' else 'false'
    
    if quiet_hours == 'y':
        start_hour = input("Quiet hours start (hour 0-23, default: 23): ").strip()
        config['ALERT_QUIET_START'] = start_hour or '23'
        
        end_hour = input("Quiet hours end (hour 0-23, default: 7): ").strip() 
        config['ALERT_QUIET_END'] = end_hour or '7'
        
        print(f"Quiet hours: {config['ALERT_QUIET_START']}:00 - {config['ALERT_QUIET_END']}:00")
        print("(Only CRITICAL alerts will be sent during quiet hours)")
    
    return config

def main():
    """Main setup function"""
    print("SolTrader Alert System Setup")
    print("=" * 50)
    print("This will help you configure email and SMS alerts for your trading bot.")
    print("Alerts will be sent when critical errors occur or trading stops.\n")
    
    all_config = {}
    
    # Setup email alerts
    email_config = setup_email_alerts()
    all_config.update(email_config)
    
    # Setup SMS alerts  
    sms_config = setup_sms_alerts()
    all_config.update(sms_config)
    
    # Setup preferences
    pref_config = setup_alert_preferences()
    all_config.update(pref_config)
    
    # Save configuration
    print("\n" + "="*60)
    print("CONFIGURATION SUMMARY")
    print("="*60)
    
    print(f"Email alerts: {'Enabled' if all_config.get('ALERT_EMAIL_ENABLED') == 'true' else 'Disabled'}")
    if all_config.get('ALERT_EMAIL_ENABLED') == 'true':
        print(f"  Recipients: {all_config.get('ALERT_TO_EMAILS', 'None')}")
    
    print(f"SMS alerts: {'Enabled' if all_config.get('ALERT_SMS_ENABLED') == 'true' else 'Disabled'}")
    if all_config.get('ALERT_SMS_ENABLED') == 'true':
        print(f"  Provider: {all_config.get('ALERT_SMS_PROVIDER', 'None')}")
        print(f"  Recipients: {all_config.get('ALERT_TO_PHONES', 'None')}")
    
    print(f"Max alerts per hour: {all_config.get('ALERT_MAX_PER_HOUR', '10')}")
    print(f"Quiet hours: {'Enabled' if all_config.get('ALERT_RESPECT_QUIET') == 'true' else 'Disabled'}")
    
    # Confirm and save
    save = input(f"\nSave this configuration? (y/n): ").lower().strip()
    if save == 'y':
        create_env_file(all_config)
        print("\n✅ Alert system configured successfully!")
        print("\nNext steps:")
        print("1. Run 'python test_alert_system.py' to test your configuration")
        print("2. Your trading bot will now send alerts when issues occur")
        print("3. Check your email/SMS to make sure alerts are working")
    else:
        print("\nConfiguration not saved.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\nSetup failed: {e}")